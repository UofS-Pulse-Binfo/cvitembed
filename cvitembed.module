<?php

/**
 * @file
 * The main functionality of this module.
 *
 * @todo make cvit chart resize:
 * CViTjs Documentation:
      To make the width of the visualization responsive (upon page load/refresh), added a script to get the width of container div/form
      and use it as the width of the canvas.
      in: sites/all/libraries/cvitjs/js/cvit.js
      canvas container the canvas is contained.
      var w = $('#cvitembed-form').width();
      $( '#cvit-canvas' ).width( w );

      Adjusted height (note when adjusting height, css must be updated to use the same height for id #div-overlay-chart-border)
      $( '#cvit-canvas' ).height( 600 );
*/

/**
 * Implements hook_menu().
 */
function cvitembed_menu() {

  $default_plot = NULL;
  $conf_filename = libraries_get_path('cvitjs') . '/cvit.conf';
  $plots = cvitembed_extract_available_plots($conf_filename, $default_plot);

  // Specify the page containing CViTjs diagrams.
  $items['cvitjs'] = array(
    'title' => t('CViTjs Whole-Genome Visualization'),
    'page callback' => 'page_list_available_plots',
    'access arguments' => array('view cvitjs plot'),
    'type' => MENU_NORMAL_ITEM,
  );

  foreach ($plots as $key => $details) {
    if (!empty($details['title']) AND !empty($details['description'])) {
      $items['cvitjs/'.$key] = array(
        'title' => $details['title'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cvitembed_form', $key, $details['title'], $details),
        'access arguments' => array('view cvitjs plot'),
        'type' => MENU_NORMAL_ITEM,
      );
    }
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function cvitembed_permission() {
  return array(
    'view cvitjs plot' => array(
      'title' => t('Access CViTjs plots.'),
    )
  );
}

/**
 * Implements hook_theme().
 */
function cvitembed_theme($existing, $type, $theme, $path) {
  $items = array();

  // A template to render the "CViT whole-genome diagrams" Form.
  $items['cvitembed_form'] = array(
    'render element' => 'form',
    'template' => 'cvitembed_page',
    'path' => $path . '/theme',
  );

  return $items;
}


/**
 * Implements hook_libraries_info().
 */
function cvitembed_libraries_info() {

  // Tell the libraries API about CViTjs
  $libraries['cvitjs'] = array(
    'name' => 'CViTjs',
    'vendor url' => 'https://github.com/awilkey/cvitjs',
    'version' => '0.0.1',
    'download url' => 'https://github.com/awilkey/cvitjs/archive/master.zip',
  );

  return $libraries;
}


/**
 * Implements hook_form().
 */
function cvitembed_form($form, &$form_state) {

  $active_plot = $form_state['build_info']['args'][0];
  $active_plot_title = $form_state['build_info']['args'][1];
  $active_plot_conf = $form_state['build_info']['args'][2]['conf'];
  $active_plot_details = $form_state['build_info']['args'][2];

  // Path to module.
  $module_path = drupal_get_path('module', 'cvitembed');
  // Relative Path to Library.
  $cvitjs_lib_path = libraries_get_path('cvitjs') . '/';

  // ATTACH STYLES.
  // Stylesheets
  $form['#attached']['css'] = array();
  $form['#attached']['css'][$cvitjs_lib_path . 'js/lib/bootstrap_embed/css/bootstrap.min.css'] = array('group' => CSS_SYSTEM, 'type' => 'file', 'weight' => 999, 'every_page' => TRUE, 'preprocess' => FALSE);
  $form['#attached']['css'][$cvitjs_lib_path . 'js/lib/hopscotch/css/hopscotch.min.css'] = array( 'preprocess' => TRUE );
  $form['#attached']['css'][$cvitjs_lib_path . 'css/cvit.css'] = array( 'preprocess' => TRUE );

  // Overide CViTjs and apply some of our own theme-ing.
  $form['#attached']['css'][] = $module_path . '/theme/css/style.cvitembed.css';

  // Use RequireJS to add all the dependencies needed by CViTjs.
  $form['#attached']['js'] = array();
  $form['#attached']['js'][$cvitjs_lib_path . 'js/lib/require/require.js'] = array('group'=>'JS_LIBRARY','type'=>'file');
  $form['#attached']['js'][$module_path . '/theme/js/cvitembed-require.js'] = array('group'=>'JS_THEME');

  // Get the title and set it to active/current plot.
  $form['active_plot'] = array(
    '#value' => $active_plot_title,
  );

  $form['description'] = array(
    '#type' => 'markup',
    '#prefix' => '<p>',
    '#suffix' => '</p>',
    '#markup' => $active_plot_details['description'],
  );

  // CVIT CANVAS.
  $form['cvit_canvas'] = array(
    '#type' => 'markup',
    '#markup' =>  '
      <div id="cvit-div" title="'. $active_plot_title .'" data-backbone="'.$active_plot.'">
        <!-- <canvas id="cvit-canvas" style="background-color:#6f6f6f;" resize></canvas> -->
      </div>'
  );

  // CVIT LEGEND.
  // Read configuration of plot requested.
  // From the configuration file.
  // Read Legend titles.
  // Could be percentage values, project name, etc.
  $conf_filename = $cvitjs_lib_path . $active_plot_conf;
  $CONF = fopen($conf_filename, "r");

  // Array to hold legend titles.
  $arr_legend = array();

  $section = NULL;
  $is_legend = FALSE;
  $section_title = NULL;

  $conf_filename = $cvitjs_lib_path . $active_plot_conf;
  $CONF = fopen($conf_filename, "r");
  if ($CONF) {
    while (($line = fgets($CONF)) !== false) {

      $line = trim($line);
      $pair = explode('=', $line);

      // If the current line is a new section then...
      if (preg_match('/^\[(.*)\]$/',$line,$matches)) {

        // First save last section.
        if ($section AND $is_legend) {
          $arr_legend[] = array(
            'colour' => $section_color,
            'value'  => $section_title,
          );
        }

        // Then initialize new section.
        $section = $matches[1];
        $is_legend = FALSE;
        $section_title = $matches[1];
        $section_color = NULL;
      }
      // Otherwise, maybe this is a key/value pair?
      elseif (sizeof($pair) == 2) {

        $pair[0] = strtolower(trim($pair[0]));
        $pair[1] = trim($pair[1]);

        switch($pair[0]) {
          case 'legend':
            $is_legend = TRUE;
            break;
          case 'title':
            $section_title = $pair[1];
            break;
          case 'color':
          case 'colour':
            $section_color = $pair[1];
            break;
        }
      }
    }
  }

  // Save last section.
  if ($section AND $is_legend) {
    $arr_legend[] = array(
      'colour' => $section_color,
      'value'  => $section_title,
    );
  }

  $form['arr_plots_legend'] = array(
    '#value' => $arr_legend,
  );

  // Add this script when chart is done rendering.
  drupal_add_js($module_path . '/theme/js/js.cvitembed.js',
    array('scope' => 'footer')
  );

  return $form;
}

/**
 * Extract the available plots from cvit.conf
 */
function cvitembed_extract_available_plots($conf_filename, &$default_plot) {

  $m = file($conf_filename);

  // Array to hold plots available in config file.
  // key is the value in ?data=value and value is the human readable string.
  $arr_plots = array();
  // Read entries.
  $current_stanza = NULL;
  foreach($m as $v) {
    // Remove excess white space.
    $v = trim($v);

    // [data.xxxx] || [general]
    if($v == '[general]') {
      // get next line.
      $current_stanza = 'general';
      continue;
    }
    // Plot definition.
    elseif (preg_match('/\[data\.(.*)\]/', $v, $matches)) {
      $current_stanza = $matches[1];

      // Ensure there is a title for the last stanza if it was a plot stanza.
      if (!empty($plot_code) AND !isset($arr_plots[$plot_code]['title'])) {
        $arr_plots[$plot_code]['title'] = $plot_code;
      }

      // Initialize the new plot.
      $plot_code = $matches[1];
      $arr_plots[$plot_code] = array();
    }
    // Unknown stanza
    elseif (preg_match('/\[(.*)\]/', $v, $matches)) {
      $current_stanza = $matches[1];
      $plot_code = NULL;
    }

    // Default plot selected - general in conf file.
    if ($current_stanza == 'general' AND preg_match('/data_default/', $v)) {
      $default_plot = trim(str_replace(array('data_default', '='), '', $v));
    }


    // If we are within a plot stanza...
    if (!empty($plot_code)) {

      // Human readable title of a plot.
      if (strpos($v, 'title') !== FALSE) {
        $arr_plots[$plot_code]['title'] = trim(str_replace(array('title', '='), '', $v));
      }

      // Configuration file.
      if (strpos($v, 'conf') !== FALSE) {
        $arr_plots[$plot_code]['conf'] = trim(preg_replace('/conf\s=\s/', '', $v));
      }

      // Description.
      if (strpos($v, 'description') !== FALSE) {
        $arr_plots[$plot_code]['description'] = trim(preg_replace('/description\s=\s/', '', $v));
      }
    }
  }

  // Ensure there is a title for the last stanza if it was a plot stanza.
  if (!empty($plot_code) AND !isset($arr_plots[$plot_code]['title'])) {
    $arr_plots[$plot_code]['title'] = $plot_code;
  }

  return $arr_plots;
}

/**
 *  Generates the martk-up to list all the available plots.
 */
function page_list_available_plots() {
  $output = '';

  $default_plot = NULL;
  $conf_filename = libraries_get_path('cvitjs') . '/cvit.conf';
  $plots = cvitembed_extract_available_plots($conf_filename, $default_plot);

  $output .= '<div class="cvit-listing">';
  $output .= '<p>CViTjs provides an interactive whole genome diagram and was developed by the Legume Federation.</p>';
  $output .= '<h1 class="listing-title">Available Charts:</h1>';

  $output .= '<ul>';
  foreach ($plots as $key => $details) {
    if (!empty($details['title']) AND !empty($details['description'])) {
      $output .= '<li>' . l($details['title'], 'cvitjs/'.$key) . ': ' . $details['description'] . '</li>';
    }
  }
  $output .= '</ul>';

  $output .= '</div>';
  return $output;
}
